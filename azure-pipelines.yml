# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  managementProject: 'Feats.Management'
  evaluationsProject: 'Feats.Evaluations'
  eventStoreProject: 'Feats.EventStore'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

steps:
- task: NuGetToolInstaller@1
  displayName: 'Installing nuget tooling'

- task: gitversion/setup@0
  displayName: 'Installing Git version'
  inputs:
    versionSpec: '5.x'

- task: gitversion/execute@0
  displayName: 'Version'
  name: Version

- task: DotNetCoreCLI@2
  displayName: 'tests'
  inputs:
    command: 'test'
    projects: 'feats.sln'
    testRunTitle: 'all tests'
    arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutput=$(Build.SourcesDirectory)/CoverageResults/ /p:MergeWith=$(Build.SourcesDirectory)/CoverageResults/coverage.json /p:CoverletOutputFormat=json%2ccobertura -m:1'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/CoverageResults/**.cobertura.xml'

- task: DockerInstaller@0
  name: 'installDockerCli'
  inputs:
    dockerVersion: '17.09.0-ce'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      docker build -t "feats.evaluations:$(GitVersion.SemVer)" -f Dockerfile.evaluations .
    failOnStderr: true
  name: 'BuildEvalDockerfile'
  displayName: 'Build feats.evaluations dockerfile'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      docker build -t "feats.management:$(GitVersion.SemVer)" -f Dockerfile.management .
    failOnStderr: true
  name: 'BuildMgmtDockerfile'
  displayName: 'Build feats.management dockerfile'

#- task: Docker@2
#  inputs:
#    command: 'build'
#    arguments: '-t "feats.management:$(Build.BuildId)" -f Dockerfile.evaluations .'
#  name: 'ManagementDocker'

